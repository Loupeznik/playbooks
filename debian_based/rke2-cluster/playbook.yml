---
- name: Prepare Ubuntu 24.04 nodes for RKE2
  hosts: all
  become: true
  tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600

    - name: Install required packages
      ansible.builtin.apt:
        name: "{{ required_packages }}"
        state: present

    - name: Create etcd group
      ansible.builtin.group:
        name: etcd
        system: true
        state: present

    - name: Create etcd user
      ansible.builtin.user:
        name: etcd
        group: etcd
        system: true
        shell: /sbin/nologin
        create_home: false
        state: present

    - name: Disable swap immediately
      ansible.builtin.command: swapoff -a
      when: ansible_swaptotal_mb > 0
      changed_when: false

    - name: Disable swap permanently
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    - name: Create modules-load.d configuration for Kubernetes
      ansible.builtin.copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter
        mode: '0644'

    - name: Load kernel modules
      ansible.builtin.shell: |
        modprobe overlay
        modprobe br_netfilter
      changed_when: false

    - name: Create sysctl configuration file
      ansible.builtin.copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
          vm.overcommit_memory                = 1
          kernel.panic                        = 10
          kernel.panic_on_oops                = 1
        mode: '0644'

    - name: Apply sysctl parameters
      ansible.builtin.command: sysctl --system
      changed_when: false

    - name: Configure DNS servers
      ansible.builtin.copy:
        dest: /etc/resolv.conf
        content: |
          # Generated by Ansible
          {% for server in dns_servers %}
          nameserver {{ server }}
          {% endfor %}
        mode: '0644'
      when: dns_servers is defined

    - name: Enable and start chrony
      ansible.builtin.systemd:
        name: chrony
        enabled: true
        state: started

    - name: Check if UFW is installed
      ansible.builtin.command: which ufw
      register: ufw_check
      failed_when: false
      changed_when: false

    - name: Configure UFW for control plane nodes
      ansible.builtin.shell: |
        ufw allow {{ item.port }}/{{ item.proto }} comment '{{ item.comment }}'
      loop: "{{ controlplane_ports }}"
      when:
        - manage_firewall
        - ufw_check.rc == 0
        - "'controlplane' in group_names"
      changed_when: false

    - name: Configure UFW for worker nodes
      ansible.builtin.shell: |
        ufw allow {{ item.port }}/{{ item.proto }} comment '{{ item.comment }}'
      loop: "{{ worker_ports }}"
      when:
        - manage_firewall
        - ufw_check.rc == 0
        - "'workers' in group_names"
      changed_when: false

    - name: Enable UFW
      ansible.builtin.shell: |
        set -o pipefail
        echo "y" | ufw enable
      args:
        executable: /bin/bash
      when:
        - manage_firewall
        - ufw_check.rc == 0
      changed_when: false

    - name: Disable AppArmor
      ansible.builtin.systemd:
        name: apparmor
        enabled: false
        state: stopped
      when: disable_apparmor
      failed_when: false

    - name: Set unique hostname
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"

    - name: Update 127.0.1.1 entry in /etc/hosts
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: '^127\.0\.1\.1'
        line: "127.0.1.1 {{ inventory_hostname }}"
        state: present

    - name: Update /etc/hosts with node information
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "{{ hostvars[item].ansible_host }} {{ item }}"
        state: present
      loop: "{{ groups['all'] }}"
      when: hostvars[item].ansible_host is defined

    - name: Remove machine-id (template preparation)
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/machine-id
        - /var/lib/dbus/machine-id
      when: prepare_template | default(false)

    - name: Create empty machine-id (template preparation)
      ansible.builtin.file:
        path: /etc/machine-id
        state: touch
        mode: '0444'
      when: prepare_template | default(false)

    - name: Verify setup
      ansible.builtin.shell: |
        set -o pipefail
        echo "=== Swap Status ==="
        swapon --show || echo "No swap enabled"
        echo "=== Kernel Modules ==="
        lsmod | grep -E 'overlay|br_netfilter'
        echo "=== Sysctl Parameters ==="
        sysctl net.bridge.bridge-nf-call-iptables net.ipv4.ip_forward
      args:
        executable: /bin/bash
      register: verify_output
      changed_when: false

    - name: Display verification results
      ansible.builtin.debug:
        var: verify_output.stdout_lines

    - name: Reboot nodes
      ansible.builtin.reboot:
        msg: "Rebooting node after RKE2 preparation"
        reboot_timeout: 300
        pre_reboot_delay: 5
